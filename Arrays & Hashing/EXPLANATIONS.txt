Contains Duplicates:
    The leetcode wants you to create something quicker than O(n^2), though it doesn't tell you.
    
    The best answer is O(n), the Hashmap. This puts new values into a set, then each step will check if 
    the value is in the set. This is quicker than using count or "in" in the provided array, since that will 
    check the whole array (of size len(array)) each time, whereas checking the set means checking a set where the
    size is only as big as the number of entries in the array so far. 

    So for an array a = [1,2,3,4,5,6,7,8,9]:
        a.count(i) will always check 9 numbers, nine times. This results in 81 comparisons.

        Placing each new number into an empty set however, and performing set.count(i) results in smaller 
        comparisons. The first count compares nothing since it's an empty set, the second compares one number,
        the third two, on and on until all the values of a are checked or a collision is found. This results in
        0+1+2+3+4+5+6+7+8 = 36 comparisons.

